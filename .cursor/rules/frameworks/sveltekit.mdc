---
description: Implementing SvelteKit-specific heuristics
globs:
alwaysApply: false
---
# SvelteKit Specific Heuristics (adapter-static & Tauri 2.0 Context)

# Configuration & Build (Static Focus)
- Ensure `adapter-static` is correctly configured in `svelte.config.js`.
    - Set `fallback` (e.g., `index.html`, `200.html`, or `404.html` depending on hosting/SPA strategy) if needed for client-side routing or SPA mode.
- Define your rendering strategy explicitly using route-level configuration (`+page.js`/`+layout.js`):
    - Use `export const prerender = true` for pages/layouts that should be fully rendered to static HTML at build time (good for SEO, static content). Requires `load` functions to be runnable at build time.
    - Use `export const ssr = false` for pages/layouts that should primarily render on the client-side (SPA behavior). Data fetching might happen client-side after initial load.
- Avoid code or configurations that assume a running Node.js server environment after the application is built and deployed within Tauri.

# Routing & Data Loading
- Define routes using the filesystem structure under `src/routes` (`+page.svelte`, `+layout.svelte`, `+error.svelte`).
- **Prioritize `+page.js` / `+layout.js`:** Use these client-usable files for data loading. The `load` function here runs during prerendering (if `prerender = true`) *and* during client-side navigation.
- **Use `Workspace` in `load`:** Inside `load` functions, use the provided `Workspace` utility. This can call external APIs or potentially `+server.js` endpoints *that run only during prerendering*.
- **Limit Server Modules (`.server.js`) Usage:**
    - Avoid `+page.server.js` and `+layout.server.js` for logic intended to run *dynamically* after deployment (e.g., handling user sessions, direct database access on request). They *only* run during the build/prerendering phase with `adapter-static`.
    - Use server modules *only* for build-time data fetching required to prerender specific pages (`prerender = true`).
- **Static API Routes (`+server.js`):**
    - `+server.js` routes do *not* run dynamically in the final static build consumed by Tauri.
    - Use them primarily for:
        - Providing data during the *prerendering* step (e.g., generating JSON data files).
        - Development mocks or local API endpoints.

# Backend Interaction (Tauri IPC Focus)
- **De-emphasize SvelteKit Server Features:** Do not implement dynamic backend logic, authentication checks, or direct database queries within SvelteKit's `.server.js` files expecting them to work post-deployment in Tauri.
- **Leverage Tauri IPC:** For all interactions requiring backend capabilities within the deployed app (e.g., file system access, database operations via Rust, system calls, handling secrets), define commands in your Tauri Rust code (`#[tauri::command]`).
- **Call Tauri Commands from Frontend:** Import and use `invoke` from `@tauri-apps/api/core` within your Svelte components (`.svelte`) or client-side logic (`+page.js`) to call your Rust commands.
- **Form Handling:** Handle form submissions client-side. Typically:
    1.  Prevent default form submission.
    2.  Gather form data.
    3.  Use Tauri's `invoke` to send data to the Rust backend for processing.
    4.  Update UI based on the response from `invoke`.
    - Avoid using SvelteKit's built-in Form Actions if they rely on server modules for dynamic processing post-deployment.

# Client-Side Code & Assets
- **Navigation:** Use standard `<a href="/path">` elements for navigating between SvelteKit routes. SvelteKit's router will intercept these for SPA-style navigation. Use `goto()` from `$app/navigation` for programmatic navigation.
- **Environment Variables:** Use *only* public environment variables prefixed according to your SvelteKit config (e.g., `PUBLIC_` by default) and accessed via `$env/static/public`. Private/server-side variables are *not* available or secure in the static build.
- **Asset Handling:** Reference static assets (images, fonts) using relative paths from the `static` directory (e.g., `/my-image.png`) or use imports for assets in `src/lib`. Ensure paths work correctly within the static build context. Consider using `%sveltekit.assets%` or `$app/paths.base` if a base path is configured.
