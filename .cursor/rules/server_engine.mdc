---
description: "Rules for the Rust engine component in /server/engine"
globs:
  - "server/engine/*.rs"
alwaysApply: false
---
// Rust engine rules

rule "Check for proper error handling" {
  pattern = /Result<[^>]*>/
  not_pattern = /anyhow::Result|thiserror|Error/
  message = "Consider using a proper error handling crate like anyhow or thiserror"
  severity = "warning"
}

rule "Ensure proper lifetime annotations" {
  pattern = /fn [a-zA-Z0-9_]+<.*>\(/
  not_pattern = /fn [a-zA-Z0-9_]+<.*'[a-z].*>\(/
  message = "Check if lifetime annotations are needed for references in generic functions"
  severity = "info"
}

rule "Check for unsafe blocks" {
  pattern = /unsafe \{/
  message = "Unsafe code detected - ensure it's properly documented and necessary"
  severity = "warning"
}

rule "Use of unwrap" {
  pattern = /\.unwrap\(\)/
  message = "Avoid using .unwrap() in production code; handle errors explicitly"
  severity = "warning"
}

rule "Check for proper documentation" {
  pattern = /pub (struct|enum|fn|trait) [a-zA-Z0-9_]+/
  not_pattern = /\/\/\/|\s*\/\*\*/
  message = "Consider adding documentation comments to public items"
  severity = "info"
}

rule "Ensure thread safety in Rust engine" {
  pattern = /(Mutex|RwLock|Arc|std::sync::)/
  message = "Verify thread safety when using concurrent primitives"
  severity = "info"
}

rule "Check for proper logging" {
  pattern = /(println!|eprintln!)/
  message = "Consider using a logging framework instead of println!/eprintln!"
  severity = "warning"
}

rule "Optimize memory usage" {
  pattern = /Box<dyn [a-zA-Z0-9_:]+>/
  message = "Check if dynamic dispatch is necessary or if static dispatch could be more efficient"
  severity = "info"
}
