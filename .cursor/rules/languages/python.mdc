---
description: "Rules for Python code quality, type safety, and best practices"
globs:
  - "**/*.py"
alwaysApply: false
---
// Python language rules

rule "Check for type annotations" {
  pattern = /def [a-zA-Z0-9_]+\([^)]*\):/
  not_pattern = /def [a-zA-Z0-9_]+\([^)]*\) -> [a-zA-Z0-9_]+:/
  message = "Consider adding return type annotations to improve type safety"
  severity = "warning"
}

rule "Ensure proper exception handling" {
  pattern = /except Exception:/
  message = "Avoid catching generic exceptions; catch specific exception types instead"
  severity = "warning"
}

rule "Check for docstrings" {
  pattern = /def [a-zA-Z0-9_]+\([^)]*\):[^"""]*\n\s+[^"""]/
  message = "Consider adding docstrings to functions for better documentation"
  severity = "info"
}

rule "Use f-strings instead of format" {
  pattern = /\.format\(/
  message = "Consider using f-strings instead of .format() for better readability"
  severity = "info"
}

rule "Check for proper imports" {
  pattern = /import \*/
  message = "Avoid wildcard imports for better code clarity and avoiding namespace pollution"
  severity = "warning"
}

rule "Use named tuples or dataclasses" {
  pattern = /tuple\([^)]+\)/
  message = "Consider using named tuples or dataclasses for better code clarity"
  severity = "info"
}

rule "Check for list/dict comprehensions" {
  pattern = /for [a-zA-Z0-9_]+ in [^:]+:[^:]+\.append\(/
  message = "Consider using list comprehension for better readability and performance"
  severity = "info"
}
