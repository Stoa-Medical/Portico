---
description:
globs: *.svelte
alwaysApply: false
---
# Svelte 5 Specific Heuristics (Runes)

# Core Reactivity & State Management (Runes First)
- **Prioritize Runes:** Use Svelte 5 Runes exclusively for reactivity in new components. Avoid Svelte 4 syntax (`let` for reactive state, `$:`, lifecycle functions like `onMount`) unless necessary for legacy compatibility.
- **State Declaration:** Use `$state()` for all reactive local component state variables.
- **Derived State:** Use `$derived()` for values computed reactively from `$state` or other `$derived` runes.
- **Side Effects:** Use `$effect()` for side effects that need to react to changes in state (e.g., data fetching based on props/state, manual DOM manipulation, setting up/tearing down subscriptions).
- **Effect Timing:** Prefer plain `$effect()` unless specific timing is needed (`$effect.pre()` for reading DOM before updates, `$effect.root()` for effects outside component lifecycle).

# Component Interface & Interaction
- **Props:** Define component properties using `$props()`. Avoid `export let`.
- **Bindable Props:** Use the `$bindable()` helper within `$props()` for properties intended for two-way binding (`bind:propName`).
- **Bindings:** Use the `bind:property` directive for two-way data binding, typically linking parent state to child `$bindable` props or binding directly to `$state` variables on HTML elements (`bind:value={$state(..)}`).
- **Event Handling:** Define event handler logic as functions within the `<script>` block. Keep inline handlers (`onclick={() => ...}`) concise, primarily for calling script functions or simple state updates.

# Markup and Structure
- **Control Flow:** Use `{#each ...}` blocks for loops (use keys like `{#each items as item (item.id)}` when list identity matters) and `{#if ...}`, `{:else if ...}`, `{:else}` blocks for conditional rendering.
- **Simplicity in Template:** Keep expressions within the template (`{...}`) simple. Move complex logic or multi-step computations into `$derived` runes or helper functions in the `<script>`.
- **Componentization:** Break down complex UIs into smaller, focused, reusable components.
- **Stores (`svelte/store`):** Reserve Svelte stores (`writable`, `readable`, `derived`) primarily for *cross-component* state that is difficult or verbose to manage solely via props and `$bindable` runes. Prefer runes for local component state.

# General Style & Snippets
- Generate concise code, avoiding unnecessary wrappers or abstractions.
- When generating snippets, focus only on the requested functionality using Runes.
- (Optional: TypeScript) If using TypeScript, apply types correctly with runes (e.g., `$state<string>('')`, `$props<{ name: string }>()`).
