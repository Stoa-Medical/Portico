/// An Agent represents a component that listens for and reacts to Signals in the system.
/// 
/// The primary way to interact with an Agent is by assigning it a Mission (a Mission might be generated by a Signal)
/// 
/// Agents are responsible for:
/// - Monitoring specific Signal types or patterns
/// - Completing Missions by using configured Steps
/// 
/// NOTE: Agents are created in the UI, and Supabase is the source-of-truth for their state.

use crate::{IdFields, TimestampFields};
use crate::models::steps::Step;
use crate::models::missions::Mission;
use crate::models::runtime_sessions::RuntimeSession;

pub struct Agent<'a> {
    // Database fields
    identifiers: IdFields,
    timestamps: TimestampFields,
    description: String,
    agent_state: AgentState,
    accepted_err_rate: f32,
    steps: Vec<Step<'a>>,
    // Runtime fields
    current_mission: Option<&'a Mission<'a>>,
    current_runtime_session: Option<&'a RuntimeSession<'a>>,
}

/// Different states for actor to be in. State diagram:
/// ```plain
///                    ┌────────────────┐
///                    │                │
///          (start)   v      (run)     |
///  Inactive ──────► Waiting ──────► Running ──┐
///      ▲             │   ▲            ▲       |
///      │             │   │ (check)    | (run) |
///      │             │   └───────► Unstable ◄─┘
///      |             v                |
///      └───────── Stopping ◄──────────┘
/// ```
enum AgentState {
    Inactive,
    Waiting,
    Running,
    Unstable,
    Stopping
}